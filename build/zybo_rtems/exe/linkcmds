/*
 *  This file contains directives for the GNU linker which are specific
 *  to the Freescale ColdFire mcf5235
 *
 *  COPYRIGHT (c) 1989-1999.
 *  On-Line Applications Research Corporation (OAR).
 *
 *  The license and distribution terms for this file may be
 *  found in the file LICENSE in this distribution or at
 *  http://www.rtems.com/license/LICENSE.
 *
 *  $Id: linkcmds 1.2 2010/05/03 14:59:07EDT acudmore Exp  $
 */


ENTRY(start)
/* Total RAM = 512M - 1M (SCU from 0x0 to 0x000FFFFF) - 1M (nocache) - 16K (MMU) */
MEMORY
{
    ram : ORIGIN = 0x00100000, LENGTH = 512M - 1M - 1M - 16K
}


/* Copied from ./c/src/lib/libbsp/powerpc/virtex5_gsfc/startup/linkcmds */
/* MsgAreaSize       = DEFINED(MsgAreaSize)   ? MsgAreaSize   : 1M;
 * RamBase           = DEFINED(RamBase)       ? RamBase       : 0x0;
 * RamSize           = DEFINED(RamSize)       ? RamSize       : 1024M - MsgAreaSize;
 * IntrStackSize     = DEFINED(IntrStackSize) ? IntrStackSize : 16K;
 * StackSize         = DEFINED(StackSize)     ? StackSize     : 64K;
 * HeapSize          = DEFINED(HeapSize)      ? HeapSize      : 0;
 */

SECTIONS
{
    
    _header_offset = 0;
    
    /*
     * Text, data and bss segments
     */
    .text : {
        _app_stext = .;       
        PROVIDE (_stext = .);
       *(.text*)
        *(.ram_code)

        /*
         * C++ constructors/destructors
         */
        *(.gnu.linkonce.t.*)

        /*
         * Initialization and finalization code.
              *
              * Various files can provide initialization and finalization
         * functions.  crtbegin.o and crtend.o are two instances. The
         * body of these functions are in .init and .fini sections. We
         * accumulate the bodies here, and prepend function prologues
         * from crti.o and function epilogues from crtn.o. crti.o must
         * be linked first; crtn.o must be linked last.  Because these
         * are wildcards, it doesn't matter if the user does not
         * actually link against crti.o and crtn.o; the linker won't
         * look for a file to match a wildcard.  The wildcard also
         * means that it doesn't matter which directory crti.o and
         * crtn.o are in. 
         */
        PROVIDE (_init = .);
        *crti.o(.init)
        *(.init)
        *crtn.o(.init)
        PROVIDE (_fini = .);
        *crti.o(.fini)
        *(.fini)
        *crtn.o(.fini)


        /*
         * C++ constructors/destructors
         *
         * gcc uses crtbegin.o to find the start of the constructors
         * and destructors so we make sure it is first.  Because this
         * is a wildcard, it doesn't matter if the user does not
         * actually link against crtbegin.o; the linker won't look for
         * a file to match a wildcard.  The wildcard also means that
         * it doesn't matter which directory crtbegin.o is in. The
         * constructor and destructor list are terminated in
         * crtend.o.  The same comments apply to it.
         */
        . = ALIGN (16);
        *crtbegin.o(.ctors)
        *(.ctors)
        *crtend.o(.ctors)
        *crtbegin.o(.dtors)
        *(.dtors)
        *crtend.o(.dtors)

        /*
         * Exception frame info
         */
        . = ALIGN (16);
        *(.eh_frame)

        /*
         * Read-only data
         */
        . = ALIGN (16);
        _rodata_start = . ;
        *(.rodata*)
        *(.gnu.linkonce.r*)
        
        . = ALIGN (16);

        *(.console_gdb_xfer)
        *(.bootstrap_data)
        . = ALIGN(16);
        _estuff = .;
        PROVIDE (_etext = .);
        _app_etext = .;       
        . = ALIGN(16);
    } >ram
        
    .data : {
       PROVIDE( _data_dest_start = . );
       PROVIDE( _copy_start = .);
       *(.data)
       *(.gnu.linkonce.d*)
       *(.gcc_except_table*)
       *(.jcr)
       . = ALIGN (16);
       PROVIDE (_edata = .);
      PROVIDE (_copy_end = .);
      PROVIDE (_data_dest_end = . );
      . = ALIGN(16);
     } >ram

/*      _data_src_start = _estuff;  */
/*      _data_src_end = _data_dest_start + SIZEOF(.data);  */
 
     .bss : {
           _clear_start = .;
           *(.bss*)
           *(COMMON)
           . = ALIGN (16);
           PROVIDE (end = .);
           _clear_end = .;
        } >ram
  /* Stabs debugging sections.  */
  .stab 0 : { *(.stab) }
  .stabstr 0 : { *(.stabstr) }
  .stab.excl 0 : { *(.stab.excl) }
  .stab.exclstr 0 : { *(.stab.exclstr) }
  .stab.index 0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment 0 : { *(.comment) }

PROVIDE (end_of_all = .);  

}
